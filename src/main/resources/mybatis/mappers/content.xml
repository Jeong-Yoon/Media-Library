<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="content">
	
	<select id="getimagelistbyfolderid" parameterType="long" resultType="imagedto">
		<![CDATA[
			select * 
			from contents
			where folder_id = #{folderId}
			and content_delete = 'N'
			order by content_id
		]]>
	</select>
	
	<select id="getvideolistbyfolderid" parameterType="videolistdto" resultType="imagedto">
		<![CDATA[
			select * 
			from contents
			where folder_id = #{folderId}
			and content_type = 'V'
			and content_delete = 'N'
			and content_id != #{videoId}
			order by content_id
		]]>
	</select>
	
	<insert id="uploadcontent" parameterType="uploadcontentdto">
		<![CDATA[
			with ins1 as (
				insert into contents
				(content_id, content_type, content_origin_name, content_save_name, content_storage, content_size, content_reg_user, folder_id)
				values
				(NEXTVAL('seq_contents'),#{content_type}, #{content_origin_name}, #{content_save_name}, #{content_storage}, #{content_size}, #{user_id}, #{folder_id})
				RETURNING content_id),
			ins2 as (insert into contents_details 
			(content_id, content_attribute)
			values
			((select content_id from ins1), #{content_attribute, typeHandler=com.inzent.medialibrary.utils.JSONTypeHandler}))
			update capacities 
			set use_capacity = use_capacity + #{content_size}
			where user_id = #{user_id}
		]]>
	</insert>
	
	<resultMap type="contentdetaildto" id="contentdetaildtoresult">
		<result property="content_id" column="content_id"/>
		<result property="content_attribute" column="content_attribute" typeHandler="com.inzent.medialibrary.utils.JSONTypeHandler"/>
	</resultMap>
	
	<insert id="uploadcontentdetail" parameterType="map">
		<![CDATA[
			insert into contents_details (content_id , content_attribute)
			values
			(#{id}, #{json, typeHandler=com.inzent.medialibrary.utils.JSONTypeHandler})
		]]>
	</insert>
	
	
	<select id="getcontentdetail" resultMap="contentdetaildtoresult">
		<![CDATA[
			select *
			from contents_details
			where content_id = #{contentId}
		]]>
	</select>
	
<!-- 	<update id="deletecontent" parameterType="long">
		update contents
		set content_delete = 'Y'
		where content_id = #{contentId}
	</update> -->

	<update id="deletecontentlist" parameterType="java.util.List">
		<foreach collection="list" item="content_id" index="index"
			separator=";">
			update contents set content_delete = 'Y' where content_id = #{content_id}
		</foreach>
	</update>
	
	<update id="restorecontentlist" parameterType="java.util.List">
		<foreach collection="list" item="content_id" index="index"
			separator=";">
			update contents set content_delete = 'N' where content_id = #{content_id}
		</foreach>
	</update>
	
	<select id="getcontentbyid" parameterType="long" resultType="imagedto">
		select c.*, f.folder_path as path , cd.content_attribute as content_attribute
		from contents c, folders f, contents_details cd 
		where c.folder_id = f.folder_id
		and cd.content_id = c.content_id
		and c.content_id = #{imageId}
	</select>
	
	<select id="selecttarget" parameterType="selecttargetdto" resultType="imagedto">
		select *
		from contents
		where folder_id = #{parent}
		and content_type = #{target}
	</select>

	<select id="getitemlist" resultType="imagedto">
		SELECT * 
		FROM contents
		WHERE content_id IN
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item}
		</foreach>
	</select>
	
	<delete id="harddeletecontent" parameterType="java.util.List">
		with del1 as (delete from contents where content_id IN
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item}
		</foreach>
		) delete from contents_details where content_id IN	
 			<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item}
			</foreach>
	</delete>
	
	<delete id="harddeletefolder">
		<foreach collection="list" item="item" index="index"
		separator=";">
		<choose>
		<when test="item/10000 == 2">
		with del1 as (
		with recursive id_list(folder_id) as (
 			select f.folder_id
 			from folders f
 			where f.folder_parent = #{item}
 			union
 			select f.folder_id
			from folders f, id_list i
 			where f.folder_parent = i.folder_id
		)
 		delete from folders where folder_id IN (select folder_id from id_list)
 		) delete from folders where folder_id = #{item}	
 		</when>
 		</choose>
 		</foreach>
	</delete>
	
	<update id="minususecapacity" parameterType="map">
		update capacities 
		set use_capacity = use_capacity - #{sum} 
		where user_id = (select user_id from users where user_email = #{email})
	</update>
</mapper>